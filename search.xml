<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>群晖必备Docker镜像：Heimdall</title>
      <link href="/2021/12/01/dsm-dockers-1/"/>
      <url>/2021/12/01/dsm-dockers-1/</url>
      
        <content type="html"><![CDATA[<p>给家庭网络中所有的服务一个统一的入口。</p><a id="more"></a><p>在开始搭建家庭网络之后，用到的服务越来越多，不同的服务往往或许地址不一样，或许端口不一样，一些不常打开的静默服务，例如OpenWRT，时间一长可能就忘记地址了。</p><p>针对这种情况，或者可以用浏览器书签解决，或者可以直接登录主路由后台，查看客户端IP，但是，理应有一种更优雅的方式。</p><h1 id="Heimdall"><a href="#Heimdall" class="headerlink" title="Heimdall"></a>Heimdall</h1><p><a href="https://heimdall.site/" target="_blank" rel="noopener">Heimdall</a>可以简单理解为一个导航页，但是比早些年Hao123之类的要优雅许多。<br><img src="/images/heimdall.png" alt="Heimdall"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>确保群晖中Docker已经安装并启用。</li><li>打开Docker应用，在”Registry”中搜索”Heimdall”。</li><li>在搜索结果中找到”linuxserver/heimdall”，点击下载。<br><img src="/images/heimdall-docker.png" alt="Heimdall-install"></li></ol><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ol><li>下载完成后，在”Image”菜单下找到下载好的镜像，点击”Launch”。</li><li>在弹出的设置窗口中点击”Advanced Settings”。</li><li>在弹出的”Advanced Settings”窗口中，点击”Port Settings”。</li><li>在”Local Port”中，把Auto改为其它数值，从而避免潜在的端口冲突，例如：444，81。<br><img src="/images/Heimdall-port.png" alt="Heimdall-port"></li><li>其它设置可以保持默认，确定之后，去到Docker应用的”Container”菜单下，应该可以看到一个正在运行的容器。</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>容器启动成功后，通过浏览器访问群晖的IP地址和刚刚设置的端口号，例如<code>http://192.168.1.3:81</code>就可以访问到Heimdall页面。</p><ol><li>点击Heimdall页面右下角的”Items”菜单，可以管理所有的导航项目。<br><img src="/images/heimdall-items.png" alt="Heimdall-items"></li><li>打开”Items”菜单之后，点击右上角的”Add”，从而添加一个新的项目。<ul><li>Application Name：在导航页上显示的名字。</li><li>Application Type：常见的应用基本都可以从这个列表找到，选择好后会自动应用对应的图标和背景色。</li><li>Colour：如果对背景色不满意可以自己设置。</li><li>URL：该应用的地址，需要带着开头的<code>http</code>或者<code>https</code>。</li><li>打开右上角的”PINNED”开关，从而确保添加的项目会固定在主页</li></ul></li><li>填写完毕之后点击右上角的”SAVE”。<br><img src="/images/heimdall-add-item.png" alt="Heimdall-add-item"></li></ol><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>通过Heimdall可以把家庭网络中所有的服务集中在一个比较优雅的导航页中，从而实现一键直达。<br>最终效果：<br><img src="/images/heimdall-preview.png" alt="Heimdall-preview"></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>Heimdall不止可以聚合家庭网络内部的服务，也可以加入一些外部的地址，以及还有一些其它的可定制功能，可以实现一个完美的个人导航页。</p>]]></content>
      
      
      <categories>
          
          <category> NAS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 群晖 </tag>
            
            <tag> NAS </tag>
            
            <tag> Synology </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set primary display in Mac</title>
      <link href="/2019/09/17/Set-primary-display-in-Mac/"/>
      <url>/2019/09/17/Set-primary-display-in-Mac/</url>
      
        <content type="html"><![CDATA[<p>Mac is absolutly a nearly perfect operating system for personal computers, but it has its limitations, one is about how to set primary display when you connect your Mac to more than one monitors.</p><a id="more"></a><p>Here are the steps:</p><ol><li>Go to system preferences.</li></ol><p><img src="/images/mac-app-menu.png" alt="Mac system menu"></p><ol start="2"><li>Open the Display setting.</li></ol><p><img src="/images/Mac-system-perference.png" alt="Mac system perference"></p><ol start="3"><li>Go to the Arrangement tab.</li></ol><p><img src="/images/Mac-display-setting.png" alt="Mac display setting"></p><ol start="4"><li>Drag the white bar (rectangled in blue) to the monitor which you want to set as primary.</li></ol><p><img src="/images/Mac-display-arrangement.png" alt="Mac display arrangement"></p>]]></content>
      
      
      <categories>
          
          <category> Accessories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cannot Debug Python in VS Code</title>
      <link href="/2018/11/12/Cannot-Debug-Python-in-VS-Code/"/>
      <url>/2018/11/12/Cannot-Debug-Python-in-VS-Code/</url>
      
        <content type="html"><![CDATA[<p>When trying to debug python files from vscode, you might run into this error:</p><p><img src="/images/vscode1.png" alt="Timeout Error"></p><a id="more"></a><h2 id="Reason-amp-Solutions"><a href="#Reason-amp-Solutions" class="headerlink" title="Reason &amp; Solutions"></a>Reason &amp; Solutions</h2><p>One of the possible reason is that you are using PowerShell as the default terminal for the debugging.</p><p>If you have the Python extension installed, you should have got a notice about this:</p><p><img src="/images/J142kj9lqg.png" alt="Python Extension Notice"></p><p>You can just click the <code>Use Command Prompt</code> button, then kill the current terminal and reopen it.</p><p>If you missed the notification, you could follow the steps below to change the default terminal from PowerShell to Command Prompt:</p><ol><li><code>Ctrl + Shift + P</code> to open the command palette.</li><li>Type <strong>select default shell</strong> and hit <strong>Enter</strong>.</li><li>Select <strong>Command Prompt</strong>.</li><li>Kill all current terminals.</li><li><code>Ctrl + ~</code> to open the terminal.</li></ol><p>Now the terminal should be command prompt and you could debug your python files.</p><h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><p>As of 11/12/2018, it had been confirmed by Brett Cannon 28 days ago that this is because there are some capability issues between conda and PowerShell, and this should be fixed in conda 4.6, before that, you could either change the terminal to command prompt or disable the environment activation.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/Microsoft/vscode-python/issues/2732#issuecomment-429994915" target="_blank" rel="noopener">https://github.com/Microsoft/vscode-python/issues/2732#issuecomment-429994915</a></p>]]></content>
      
      
      <categories>
          
          <category> Accessories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE note section 1</title>
      <link href="/2018/09/17/VUE-note-section-1/"/>
      <url>/2018/09/17/VUE-note-section-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>404 Error When Loading WOFF2 Fonts from Azure Websites</title>
      <link href="/2018/03/27/404-woff2-azure-md/"/>
      <url>/2018/03/27/404-woff2-azure-md/</url>
      
        <content type="html"><![CDATA[<p>When publishing a new website in Azure, using Azure App Service, the woff2 fonts couldn’t be loaded with an 404 not found error.</p><a id="more"></a><p>To fix this issue, you need to add the following content to your <code>web.config</code> file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">system.WebServer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">remove</span> <span class="attr">fileExtension</span>=<span class="string">".woff"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">remove</span> <span class="attr">fileExtension</span>=<span class="string">".woff2"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".woff"</span> <span class="attr">mimeType</span>=<span class="string">"application/font-woff"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".woff2"</span> <span class="attr">mimeType</span>=<span class="string">"application/font-woff2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">system.WebServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Thanks to <a href="https://ppolyzos.com/2016/03/16/mime-types-missing-in-azure-websites/" target="_blank" rel="noopener">ppolyzos’s</a> blog.</p>]]></content>
      
      
      <categories>
          
          <category> Azure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> azure </tag>
            
            <tag> font </tag>
            
            <tag> woff2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FontAwesome Hover Effect without JS</title>
      <link href="/2018/01/30/hover-effect-on-fontawesome/"/>
      <url>/2018/01/30/hover-effect-on-fontawesome/</url>
      
        <content type="html"><![CDATA[<p>Demo: <a href="https://jsfiddle.net/z479yomw/" target="_blank" rel="noopener">JsFiddle</a><br>Thanks to: <a href="http://makemysoft.com/" target="_blank" rel="noopener">Hans</a></p><a id="more"></a><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">id</span>=<span class="string">'hover-effect'</span> <span class="attr">class</span>=<span class="string">"fa"</span> <span class="attr">style</span>=<span class="string">"font-size:24px"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#hover-effect</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">"\f204"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#hover-effect</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">"\f205"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><ul><li><code>\f204</code> is the css content for the Font Awesome icon: fa-toggle-off, and <code>\f205</code> is the css content for icon: fa-toggle-on.</li><li><code>f204</code> and <code>f205</code> are also the unicode values for the corresponding icons, you can find a full list of unicode values on <a href="https://www.w3schools.com/icons/icons_reference.asp" target="_blank" rel="noopener">W3Shcools</a> or <a href="http://astronautweb.co/snippet/font-awesome/" target="_blank" rel="noopener">here</a></li><li>The <code>:before</code> keyword is necessary.</li><li>The container element (<code>#hover-effect</code>) should have the class <code>fa</code>.</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FontAwesome </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery - Paste Event for Text Box</title>
      <link href="/2018/01/30/jQuery-paste-event/"/>
      <url>/2018/01/30/jQuery-paste-event/</url>
      
        <content type="html"><![CDATA[<p>Demo: <a href="https://jsfiddle.net/hkjmtg9a/" target="_blank" rel="noopener">JsFiddle</a></p><a id="more"></a><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'txt'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#txt'</span>).on(<span class="string">'paste'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isIE()) &#123;</span><br><span class="line">    <span class="comment">//IE allows to get the clipboard data of the window object.</span></span><br><span class="line">    content = <span class="built_in">window</span>.clipboardData.getData(<span class="string">'text'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//This works for Chrome and Firefox.</span></span><br><span class="line">    content = e.originalEvent.clipboardData.getData(<span class="string">'text/plain'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  alert(content);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIE</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ua = <span class="built_in">window</span>.navigator.userAgent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ua.indexOf(<span class="string">'MSIE '</span>) &gt; <span class="number">0</span> || ua.indexOf(<span class="string">'Trident/'</span>) &gt; <span class="number">0</span> || ua.indexOf(<span class="string">'Edge/'</span>) &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端比较有用的开源JS</title>
      <link href="/2017/12/21/useful-js-in-front/"/>
      <url>/2017/12/21/useful-js-in-front/</url>
      
        <content type="html"><![CDATA[<p>本文用来收集前端比较有用的开源JS库。</p><a id="more"></a><ul><li>JS库：Chosen</li><li><p>描述：</p><blockquote><p>Chosen is a jQuery plugin that makes long, unwieldy select boxes much more user-friendly.</p></blockquote></li><li><p>官网：<a href="https://harvesthq.github.io/chosen/" target="_blank" rel="noopener">https://harvesthq.github.io/chosen/</a></p></li><li>GitHub: <a href="https://github.com/harvesthq/chosen" target="_blank" rel="noopener">https://github.com/harvesthq/chosen</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过批处理查看磁盘的可用空间</title>
      <link href="/2017/12/19/get-disk-space-in-bat/"/>
      <url>/2017/12/19/get-disk-space-in-bat/</url>
      
        <content type="html"><![CDATA[<p>吐槽一下CSDN，虽然我不是一个活跃用户，但是好歹我也早就注册了，消息中心里边一堆2015年甚至更早的消息，然而今天想要在技术问答中回答一个问题的时候，好容易编辑好答案了，一点“我要回答”之后，提示“新注册用户3天内不能再问答频道回答”，然后编辑好的答案也没了，窝火。</p><a id="more"></a><p>说正题，问题是：</p><blockquote><p>利用bat文件，显示<br>C盘总容量；<br>总容量减去100G以后的容量；<br>第二步剩余容量平均分成两份之后每一份的容量。<br>均以MB显示。</p></blockquote><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>首先，批处理确实可以获得某一分区的磁盘空间，包括可用空间以及剩余空间，但是是以字节为单位的。</p><p>第二，当使用批处理进行数学运算时，所能处理的最大数字是<code>2^31-1</code>，具体可以用下面的批处理脚本尝试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set /a abc=2147483648+1</span><br><span class="line">echo %abc%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p>而<code>2^31-1</code>，即<code>2,147,483,647</code>，如果将其看作是以字节为单位的容量值的话，换算成GB也就是2GB左右。<br>基于以上事实，对于主流的硬盘分区空间，批处理可以精确的获取其字节容量，但是并不能精确的转化为MB或者GB。</p><p>虽然如此，在获取到字节容量后，可以通过截取其中特定位数，将字节容量近似的转化为GB或者MB。</p><p>例如，如果字节容量为：<code>2,147,483,647</code>，要将其转化为GB，只需要将小数点左移9位，相当于做<code>/1000/1000/1000</code>运算，然后舍去小数点右侧的值，即可得到<code>2GB</code>。</p><p>基于这种算法的批处理脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">for /f &quot;tokens=2 delims==&quot; %%a in (&apos;wmic logicaldisk c: get Size/value&apos;) do set tsize=%%a</span><br><span class="line">for /f &quot;tokens=2 delims==&quot; %%a in (&apos;wmic logicaldisk c: get FreeSpace/value&apos;) do set fsize=%%a</span><br><span class="line">set gbtsize=%tsize:~0,-7%</span><br><span class="line">set gbfsize=%fsize:~0,-7%</span><br><span class="line">set /a newtsize = %gbtsize%-102400</span><br><span class="line">set /a rsize = %newtsize%/2</span><br><span class="line"></span><br><span class="line">:cut1</span><br><span class="line">set pa=!gbtsize:~-3!</span><br><span class="line">if &quot;!gbtsize!&quot;==&quot;&quot; (goto cut2)</span><br><span class="line">set pa1=!pa!,!pa1!</span><br><span class="line">set gbtsize=!gbtsize:~0,-3!</span><br><span class="line">goto cut1</span><br><span class="line"></span><br><span class="line">:cut2</span><br><span class="line">set pb=!newtsize:~-3!</span><br><span class="line">if &quot;!newtsize!&quot;==&quot;&quot; (goto cut3)</span><br><span class="line">set pb1=!pb!,!pb1!</span><br><span class="line">set newtsize=!newtsize:~0,-3!</span><br><span class="line">goto cut2</span><br><span class="line"></span><br><span class="line">:cut3</span><br><span class="line">set pc=!rsize:~-3!</span><br><span class="line">if &quot;!rsize!&quot;==&quot;&quot; (goto output)</span><br><span class="line">set pc1=!pc!,!pc1!</span><br><span class="line">set rsize=!rsize:~0,-3!</span><br><span class="line">goto cut3</span><br><span class="line"></span><br><span class="line">:output</span><br><span class="line">echo Total Size of Drive C: !pa1:~0,-1! MB</span><br><span class="line">echo Remaining Size after 100G: !pb1:~0,-1! MB</span><br><span class="line">echo Half of Remaining Size: !pc1:~0,-1! MB</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Accessories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>何为……具体</title>
      <link href="/2017/12/16/what-is/"/>
      <url>/2017/12/16/what-is/</url>
      
        <content type="html"><![CDATA[<p>摘自内涵段子网站</p><h2 id="美人"><a href="#美人" class="headerlink" title="美人"></a>美人</h2><p>何为美人？<br>纤手，漾眸，柔腰肢。<br>可否具体？<br>橘子香气。<br>可否再具体？<br>汝。</p><a id="more"></a><h2 id="君子"><a href="#君子" class="headerlink" title="君子"></a>君子</h2><p>何为君子？<br>修身，养性，见贤思齐。<br>可否具体？<br>风流，儒雅，温润如玉。<br>可否再具体？<br>吾。</p><h2 id="孤寂"><a href="#孤寂" class="headerlink" title="孤寂"></a>孤寂</h2><p>何为孤寂？<br>清风，艳日，无笑意。<br>可否具体？<br>左拥，右抱，无情欲。<br>可否再具体？<br>不得你。</p><h2 id="思念"><a href="#思念" class="headerlink" title="思念"></a>思念</h2><p>何为思兮？<br>惦念，不语，乱了心。<br>可否具体？<br>失神差可拟。<br>可否再具体？<br>哪里都是你。</p><h2 id="漂泊"><a href="#漂泊" class="headerlink" title="漂泊"></a>漂泊</h2><p>何为漂泊？<br>飞蓬，飘萍，无根底。<br>可否具体？<br>只鹤，孤雁，寒塘独下迟。<br>可否再具体？<br>南游，东出，客愁，旅思，离乡千万里。<br>可否更具体？<br>春行，秋度，杳杳无归期。<br>仍是不解。<br>浪迹云游，何处寻你。</p><h2 id="幸"><a href="#幸" class="headerlink" title="幸"></a>幸</h2><p>何为幸？<br>考功名，登龙门，两袖清风。<br>可否具体？<br>居高位，掌大权，坐拥天下。<br>可否再具体？<br>独有你。</p><h2 id="不甘"><a href="#不甘" class="headerlink" title="不甘"></a>不甘</h2><p>何为不甘？<br>求之不得。<br>可否具体？<br>得而失之。<br>可否再具体？<br>得你，失你。</p><h2 id="伴侣"><a href="#伴侣" class="headerlink" title="伴侣"></a>伴侣</h2><p>何为伴侣？<br>柴米，油盐，木。<br>可否具体？<br>粗茶，淡饭，执子之手。<br>可否再具体？<br>和你。</p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设置Git用户名和邮箱</title>
      <link href="/2017/12/12/setting-username-and-email-for-git/"/>
      <url>/2017/12/12/setting-username-and-email-for-git/</url>
      
        <content type="html"><![CDATA[<h2 id="为所有Repository设置统一的用户名和邮箱"><a href="#为所有Repository设置统一的用户名和邮箱" class="headerlink" title="为所有Repository设置统一的用户名和邮箱"></a>为所有Repository设置统一的用户名和邮箱</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Rick&quot;</span><br><span class="line">$ git config --global user.email &quot;myslsh_2015@163.com&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="为当前Repository单独设置用户名和邮箱"><a href="#为当前Repository单独设置用户名和邮箱" class="headerlink" title="为当前Repository单独设置用户名和邮箱"></a>为当前Repository单独设置用户名和邮箱</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name &quot;User&quot;</span><br><span class="line">$ git config user.email &quot;user@example.com&quot;</span><br></pre></td></tr></table></figure><h2 id="查看全局设置"><a href="#查看全局设置" class="headerlink" title="查看全局设置"></a>查看全局设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name</span><br><span class="line">$ git config --global user.email</span><br></pre></td></tr></table></figure><h2 id="查看当前设置"><a href="#查看当前设置" class="headerlink" title="查看当前设置"></a>查看当前设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Accessories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下多个SSH Key管理</title>
      <link href="/2017/12/10/multiple-ssh-keys/"/>
      <url>/2017/12/10/multiple-ssh-keys/</url>
      
        <content type="html"><![CDATA[<h2 id="SSH-Key生成"><a href="#SSH-Key生成" class="headerlink" title="SSH Key生成"></a>SSH Key生成</h2><p>在通过<code>ssh-keygen</code>命令生成Key的时候，当提示<code>Enter file in which to save the key</code>时，为不同的Key添加不同的后缀名，例如：</p><ul><li>用于GitHub的Key<code>id_rsa_github</code>。</li><li>用于Bitbucket的Key<code>id_rsa_bitbucket</code>。</li></ul><a id="more"></a><h2 id="使用密钥管理器"><a href="#使用密钥管理器" class="headerlink" title="使用密钥管理器"></a>使用密钥管理器</h2><p>执行<code>ssh-add</code>命令将私钥添加至<code>ssh-agent</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_github</span><br><span class="line">ssh-add ~/.ssh/id_rsa_bitbucket</span><br></pre></td></tr></table></figure><p>这一步有可能出现<code>Could not open a connection to your authentication agent.</code>错误，解决方法如下：</p><ol><li>执行<code>ps aux | grep ssh</code>命令，查看<code>ssh-agent</code>的线程PID。</li><li>执行<code>kill -9 PID</code>杀死线程。</li><li><p>进入<code>.ssh</code>目录，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec ssh-agent bash</span><br><span class="line">eval ssh-agent -s</span><br></pre></td></tr></table></figure></li><li><p>重新执行<code>ssh-add</code>命令，将私钥添加至<code>ssh-agent</code>。</p></li></ol><h2 id="创建config文件"><a href="#创建config文件" class="headerlink" title="创建config文件"></a>创建<code>config</code>文件</h2><p>在<code>.ssh</code>目录下新建一个<code>config</code>文件，编辑文件内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">User Yourname</span><br><span class="line"></span><br><span class="line"># bitbucket</span><br><span class="line">Host bitbucket.com</span><br><span class="line">HostName bitbucket.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_bitbucket</span><br><span class="line">User Yourname</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Accessories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH连接提示 Permission denied (publickey)的解决方法</title>
      <link href="/2017/07/11/git-pubkey-md/"/>
      <url>/2017/07/11/git-pubkey-md/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>SSH Key已经正常生成，并已经成功配置到GitHub上。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>通过SSH连接GitHub时出现错误提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permission denied (publickey).</span><br></pre></td></tr></table></figure></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>可能是因为在生成Key的时候，采用了自定义文件名，没有采用默认的<code>id_rsa</code>文件名，导致系统在本地找不到与<code>publickey</code>相对应的<code>privatekey</code>。</p><p>未做进一步测试，所以这个原因只是猜测。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>执行<code>ssh-add</code>命令，添加自定义文件名的<code>privatekey</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/FileNameofYourPrivateKey</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Accessories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fedora安装Listen1</title>
      <link href="/2017/02/11/listen1-on-fedora-md/"/>
      <url>/2017/02/11/listen1-on-fedora-md/</url>
      
        <content type="html"><![CDATA[<h2 id="神器"><a href="#神器" class="headerlink" title="神器"></a>神器</h2><p>在GitHub上偶然发现一个针对国内在线音乐平台的一个神器：Listen1，项目地址：<a href="https://github.com/listen1/listen1_desktop" target="_blank" rel="noopener">GitHub</a></p><a id="more"></a><p>此神器的之所以被称为神器，原因有二：</p><ol><li>同时提供网易云音乐，虾米，QQ音乐三家的曲库。</li><li>有Linux客户端。</li></ol><p>其实一直以来就很喜欢网易云音乐，曲库也算比较全，但是无奈有个别歌曲只有虾米上有，所以也一直因为这个事头疼了好久，而对QQ音乐一直无感。</p><p>既然Listen1在一个应用内同时网易和虾米，果断要收入囊中。</p><h2 id="遗憾"><a href="#遗憾" class="headerlink" title="遗憾"></a>遗憾</h2><p>Listen1提供了Chrome和Firefox的插件，提供了Win，Mac的客户端，也提供了Linux的客户端，但Linux上是Deb安装包，这家伙在Fedora上就有点水土不服了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>Linux上本身也有一个神器，叫做<code>alien</code>，可以将Debian/Ubuntu的Deb包转化成RedHat/Fedora下可用的RPM包，然而未必一定能成功。</p><p>当我尝试将Listen1的Deb包通过<code>alien</code>转化成RPM包的时候，果然不出意料的失败了。</p><p>换备用方案：Listen1是基于Electron编写的，打包的Deb包也是通过Electron完成的，既然如此，我们可以<code>clone</code>源码后，重新用Electron打包一个RPM包就完美了。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>安装<code>rpmbuild</code>:<code>$ sudo dnf install rpm-build</code></li><li>安装<code>electron-installer-redhat</code>: <code>$ npm install --save-dev electron-installer-redhat</code></li><li>修改Listen1的<code>package.json</code>：<ul><li>第24行，<code>devDependencies</code>下添加：<code>&quot;electron-installer-redhat&quot;: &quot;*&quot;</code></li><li>第47行，<code>scripts</code>下添加:<code>&quot;dist:rpm64&quot;: &quot;electron-packager . listen1 --platform linux --arch x64 --name=&#39;Listen 1&#39; --version=&#39;1.0.1&#39; --out dist/; electron-installer-redhat --src dist/listen1-linux-x64/ --dest dist/installers/ --arch x86_64&quot;</code></li></ul></li><li>在Listen1根目录下执行<code>$ npm run dist:rpm64</code></li><li>稍等片刻就会在<code>dist/installer/</code>目录下生成RPM包。</li><li>此时就可以愉快的使用<code>$ sudo dnf install listen1*.rpm</code>了。</li></ol><h2 id="已知Bug"><a href="#已知Bug" class="headerlink" title="已知Bug"></a>已知Bug</h2><p>我目前的桌面环境是Fedora 25 with KDE Plasma 5.8.5，在此环境下，按照上述步骤安装Listen1之后存在的Bug为：</p><ul><li><p>KDE应用程序启动器中存在Listen1的图标，但是点击后无法启动Listen1，提示“找不到应用程序Listen1”</p><p>通过运行以下命令解决：<br><code>$ sudo ln -s /usr/share/Listen1/listen1 /usr/bin/Listen1</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fedora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Note - Day 2</title>
      <link href="/2017/01/05/python-note-2/"/>
      <url>/2017/01/05/python-note-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><p>Python uses <code>{}</code> to represent dictionary:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; scores = &#123;<span class="string">'Rick'</span>:98,<span class="string">'Bob'</span>:78,<span class="string">'Tom'</span>:92&#125;</span><br><span class="line">&gt;&gt;&gt; scores[<span class="string">'Rick'</span>]</span><br><span class="line">98</span><br><span class="line">&gt;&gt;&gt; source.get(<span class="string">'Rick'</span>)</span><br><span class="line">98</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>Use <code>in</code> to check if the key is included in the dictionary:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">'Angel'</span> <span class="keyword">in</span> scores</span><br><span class="line">False</span><br></pre></td></tr></table></figure></p><p>Use <code>pop()</code> to remove items from dictionary:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; scores.pop(<span class="string">'Rick'</span>)</span><br><span class="line">98</span><br><span class="line">&gt;&gt;&gt; scores</span><br><span class="line">&#123;<span class="string">'Bob'</span>:78,<span class="string">'Tom'</span>:92&#125;</span><br></pre></td></tr></table></figure></p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>A dictionary contains both keys and values, but a set contains keys only, no values, also, you need to provide a list to get a set:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="built_in">set</span>([1,2,3])</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1,2,3&#125;</span><br></pre></td></tr></table></figure></p><p>Duplicate values in a list will be removed automatically:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="built_in">set</span>([1,2,2,3,3,4])</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1,2,3,4&#125;</span><br></pre></td></tr></table></figure></p><p>Add / Remove keys:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s.add(5)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; s.remove(2)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1,3,4,5&#125;</span><br></pre></td></tr></table></figure></p><p>Union or intersection:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s1 = <span class="built_in">set</span>([1,2,3,4])</span><br><span class="line">&gt;&gt;&gt; s2 = <span class="built_in">set</span>([2,3,4,5])</span><br><span class="line">&gt;&gt;&gt; s1 &amp; s2</span><br><span class="line">&#123;2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; s1 | s2</span><br><span class="line">&#123;1,2,3,4,5&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>In Python, a function name can be assigned to a variable:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = abs</span><br><span class="line">&gt;&gt;&gt; a(-1)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p><p>Declare a function<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def myFunc(x): <span class="comment"># myFunc is the function name, x is the parameter for the function.</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= 0:</span><br><span class="line">        <span class="built_in">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">return</span> -x</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myFunc(-1))</span><br></pre></td></tr></table></figure></p><h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3><h4 id="Position-Arguments"><a href="#Position-Arguments" class="headerlink" title="Position Arguments"></a>Position Arguments</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def power(a):</span><br><span class="line">    <span class="built_in">return</span> a * a</span><br><span class="line"></span><br><span class="line">def powern(a,n):</span><br><span class="line">    s = 1</span><br><span class="line">    <span class="keyword">while</span> n &gt; 0:</span><br><span class="line">        n = n -1</span><br><span class="line">        s = s * a</span><br><span class="line">    <span class="built_in">return</span> s</span><br></pre></td></tr></table></figure><p>All basic arguments are required when the function is invoked.</p><h4 id="Default-Arguments"><a href="#Default-Arguments" class="headerlink" title="Default Arguments"></a>Default Arguments</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def powern(a,n=2): <span class="comment"># n is a default argument and the default value is 2.</span></span><br><span class="line">    s = 1</span><br><span class="line">    <span class="keyword">while</span> n &gt; 0:</span><br><span class="line">        n = n -1</span><br><span class="line">        s = s * a</span><br><span class="line">    <span class="built_in">return</span> s</span><br></pre></td></tr></table></figure><p>When calling the function, the default argument can be ignored, if so, the default value will be used.</p><p>If a function has more than 1 default arguments, we might need to specify the argument name when providing values:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def newHires(name, age, gender=<span class="string">'F'</span>, hometown=<span class="string">'China'</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'New Hire:'</span>, name, gender, age, <span class="string">'Years old.'</span>, <span class="string">'From'</span>, hometown)</span><br></pre></td></tr></table></figure></p><p>If the <strong>gender</strong> is different, but <strong>hometown</strong> is same to the default value, we may invoke this function like:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newHires(<span class="string">'Rick'</span>, 20, <span class="string">'M'</span>)</span><br></pre></td></tr></table></figure></p><p>If the <strong>hometown</strong> is different, but <strong>gender</strong> is same to the default value, we may invoke this function like:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newHires(<span class="string">'Rick'</span>, 20, hometown=<span class="string">'U.K.'</span>)</span><br></pre></td></tr></table></figure></p><h4 id="Multi-Value-Arguments"><a href="#Multi-Value-Arguments" class="headerlink" title="Multi Value Arguments"></a>Multi Value Arguments</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def calc(*numbers): # The * character indicates that the number of value in the argument is non-staionary.</span><br><span class="line">    sum = 0</span><br><span class="line">    for n in numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure><p>For the above function, we can call it like:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; calc(1,2,3)</span><br><span class="line">14</span><br><span class="line">&gt;&gt;&gt; calc(1,2,3,4,5)</span><br><span class="line">55</span><br></pre></td></tr></table></figure></p><p>Pass a list into the function:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; nums = [1,2,3]</span><br><span class="line">&gt;&gt;&gt; calc(nums[0],nums[1],nums[2])</span><br><span class="line">14</span><br></pre></td></tr></table></figure></p><p>Or:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; nums = [1,2,3]</span><br><span class="line">&gt;&gt;&gt; calc(*nums)</span><br><span class="line">14</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VBA简明教程之三 - VBA编辑器</title>
      <link href="/2017/01/04/vba-basic-guide-3/"/>
      <url>/2017/01/04/vba-basic-guide-3/</url>
      
        <content type="html"><![CDATA[<h2 id="打开方式"><a href="#打开方式" class="headerlink" title="打开方式"></a>打开方式</h2><p>可以通过以下几种方式打开VBA编辑器：</p><ul><li>快捷键ALT+F11。</li><li>在<strong>DEVELOPER</strong>菜单下点击Visual Basic图标。</li><li>在<strong>DEVELOPER</strong>菜单下点击Macros图标，然后在列表中选择一个Macro，点击右侧的Edit。</li></ul><a id="more"></a><h2 id="窗口概览"><a href="#窗口概览" class="headerlink" title="窗口概览"></a>窗口概览</h2><p>先看截图：</p><p><img src="/images/vba-editor.png" alt="VBA Editor"></p><h3 id="顶部常用工具栏"><a href="#顶部常用工具栏" class="headerlink" title="顶部常用工具栏"></a>顶部常用工具栏</h3><p>常用工具栏为截图中编号为1的区域，在其上方是Windows中常见的菜单栏。</p><p>如果发现只有菜单栏，而没有常用工具栏的话，可以通过以下步骤打开：</p><ol><li>点击菜单栏中的<strong>View</strong>。</li><li>点击Toolbar二级菜单中的<strong>Standard</strong>。</li></ol><p><img src="/images/standard-toolbar.png" alt="Standard Toolbar"></p><p>关于这一部分每个按钮的作用会在后续的内容中涉及到，这里不做详细解释。</p><h3 id="工程窗口"><a href="#工程窗口" class="headerlink" title="工程窗口"></a>工程窗口</h3><p>工程窗口为截图中编号为2的区域，如果找不到此窗口，可以通过快捷键Ctrl+R打开。</p><p>此窗口又被称为“Project Explorer”，这里列出的是当前工作簿中的一些对象：</p><ul><li>VBAProject(2016 Revenues.xlsx): 括号中的内容是当前打开的工作簿的名字，如果同时打开了多个工作簿，会有另外一个VBAProject存在，如下图所示，表示当前同时打开了两个工作簿，分别是2016 Revenues.xlsx和2015 Revenues.xlsx：</li></ul><p><img src="/images/two-workbooks-in-vba-e.png" alt="Two Workbooks"></p><ul><li><p>Microsoft Excel Objects: 这个文件夹下会列出当前工作簿中所有的工作表，括号中是工作表的的名字，括号外是工作表的编号。除此之外，还有一个叫做<strong>ThisWorkbook</strong>的对象，表示的是当前工作表。</p></li><li><p>Modules: 这个文件夹下会列出当前工作簿中，所有的VBA模块。在上一篇教程中，我们所录制的宏，就是存在这个文件夹下的Module1中。</p></li><li><p>在这个窗口中，还可能出现其它的对象，现在暂且不做讨论，当后面讲解到相应的内容的时候，大家自会明白。</p></li></ul><h3 id="属性窗口"><a href="#属性窗口" class="headerlink" title="属性窗口"></a>属性窗口</h3><p>属性窗口为截图中编号为3的区域，如果找不到此窗口，可以通过快捷键F4打开。</p><p>在本教程的前半部分，我们基本不会用到属性窗口，所以大家只需要暂时先记住有这个东西，就可以了。</p><h3 id="立即窗口"><a href="#立即窗口" class="headerlink" title="立即窗口"></a>立即窗口</h3><p>属性窗口为截图中编号为4的区域，如果找不到此窗口，可以通过快捷键Ctrl+G打开。</p><p>立即窗口的主要用途在于调试代码，所以我们也暂时用不到，只需要先知道有这个东西。</p><h3 id="代码窗口"><a href="#代码窗口" class="headerlink" title="代码窗口"></a>代码窗口</h3><p>代码窗口为截图中编号为5的区域，如果找不到此窗口，可以通过双击<strong>工程窗口</strong>中，<strong>Modules</strong>文件夹下的<strong>Module1</strong>打开。</p><p>这里就是用来编写VBA代码的地方。</p><p>在截图中已经可以看到一些代码，这些代码就是我们在上一篇教程中通过录制自动生成的。</p><p>在我们对VBA语言的基本知识有所了解之前，暂时不对代码的内容做任何解释。</p>]]></content>
      
      
      <categories>
          
          <category> Office Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Note - Day 1</title>
      <link href="/2017/01/03/python-note-1/"/>
      <url>/2017/01/03/python-note-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><p>There are 2 existing versions of Python: Python 2.7.x and Python 3.5.x, I don’t know the detailed discrepancies between the two versions but I think the newer is the future, so this note is all about Python 3.5.x and above.</p><a id="more"></a><h2 id="Python-on-Linux"><a href="#Python-on-Linux" class="headerlink" title="Python on Linux"></a>Python on Linux</h2><p>Many Linux distributions use Python 2.7.x by default, since the core of many popular workspaces on Linux like Unity, Gnome and KDE are based on Python 2.7.x.</p><p>But it is ok to run both versions of Python on one Linux machine. The only problem maybe you need to type <code>python3</code> instead of <code>python</code> to test Python 3.5.x scripts in Terminal, it is because the default Python program in Linux is Python 2.7.x.</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul><li>Python language is case sensitive.</li><li>Either <code>&#39;</code> or <code>&quot;</code> can be used to indicate a string.</li><li><p>The escape character in Python is <code>\</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">'I\'</span>m Rick.<span class="string">')</span></span><br><span class="line"><span class="string">I'</span>m Rick.</span><br></pre></td></tr></table></figure></li><li><p>An <code>r</code> before any string will cancel the escape function.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(r<span class="string">'I\'</span>m Rick.<span class="string">')</span></span><br><span class="line"><span class="string">I\'</span>m Rick.</span><br></pre></td></tr></table></figure></li><li><p>The data type of the result of <code>input()</code> is string, if a number is required, you should use <code>int()</code> to convert the string to number.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age = input(<span class="string">'How old are you:'</span>)</span><br><span class="line">&gt;&gt;&gt; age = int(age)</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">'You will be %d years old after 5 years.'</span> % (age + 5))</span><br><span class="line">You will be XX years old after 5 years.</span><br></pre></td></tr></table></figure></li></ul><h2 id="Functions-and-Methods-about-string"><a href="#Functions-and-Methods-about-string" class="headerlink" title="Functions and Methods about string"></a>Functions and Methods about string</h2><p>By default, Python3 uses Unicode to encode strings.</p><p>A prefix <code>b</code> in a string indicates that the data type is <code>bytes</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = b<span class="string">'ABC'</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(a)</span><br><span class="line">b<span class="string">'ABC'</span></span><br></pre></td></tr></table></figure></p><ul><li><code>ord()</code>: Return the Unicode of the character.</li><li><code>chr()</code>: Return the character represents by the Unicode provided.</li><li><code>str.encode(&#39;ascii&#39;)</code>: Encode the string by using ASCII, the data type of the result will be <code>bytes</code>.</li><li><code>str.encode(&#39;utf-8&#39;)</code>: Encode the string by using UTF-8, the data type of the result will be <code>bytes</code>.</li><li><code>byte.decode(&#39;utf-8&#39;)</code>: Convert the byte stream to string, encoded by UTF-8, the data type of the result will be <code>bytes</code>.</li><li><code>len()</code>: Return the length of the string.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; len(<span class="string">"abc"</span>)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; len(<span class="string">"你好"</span>)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; len(b<span class="string">"abc"</span>)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; len(<span class="string">"你好"</span>.encode(<span class="string">'utf-8'</span>)) <span class="comment"># utf-8 uses 3 bytes to represent a character in chinese.</span></span><br><span class="line">6</span><br></pre></td></tr></table></figure></li></ul><p>In order to make sure the Python script runs properly under a multi-language environment, we usually add the following line at the beginning of the script:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure></p><h2 id="Placeholders"><a href="#Placeholders" class="headerlink" title="Placeholders"></a>Placeholders</h2><ul><li><code>%d</code>: Integer</li><li><code>%f</code>: Floating point number</li><li><code>%s</code>: String</li><li><code>%x</code>: Hexadecimal</li></ul><p>For example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">'Hi %s, you have earned $%d this month.'</span> % (<span class="string">'Rick'</span>, 1000)</span><br><span class="line">Hi Rick, you have earned <span class="variable">$1000</span> this month.</span><br></pre></td></tr></table></figure></p><p>If you are not sure which placeholder to use, <code>%s</code> always works, it could convert any type to string.</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>Python uses <code>[]</code> to represent list:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; teammembers = [<span class="string">'Rick'</span>,<span class="string">'Bob'</span>,<span class="string">'Tom'</span>]</span><br><span class="line">&gt;&gt;&gt; teammembers</span><br><span class="line">[<span class="string">'Rick'</span>, <span class="string">'Bob'</span>, <span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure></p><ul><li>Use <code>len()</code> to get the <strong>count</strong> of a list.</li><li><p>Use the index number to access the items in a list, index number start from <strong>0</strong>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; teammembers[0]</span><br><span class="line"><span class="string">'Rick'</span></span><br></pre></td></tr></table></figure></li><li><p>Use the index <code>-1</code> to get the last item in a list.</p></li></ul><h3 id="Add-item-to-list"><a href="#Add-item-to-list" class="headerlink" title="Add item to list"></a>Add item to list</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; teammembers.append(<span class="string">'Lisa'</span>) <span class="comment"># Append a new item to the end of the list.</span></span><br><span class="line">&gt;&gt;&gt; teammembers</span><br><span class="line">[<span class="string">'Rick'</span>, <span class="string">'Bob'</span>, <span class="string">'Tom'</span>, <span class="string">'Lisa'</span>]</span><br><span class="line">&gt;&gt;&gt; teammembers.insert(1,<span class="string">'Lily'</span>) <span class="comment"># Insert a new item to the position of index number 1.</span></span><br><span class="line">&gt;&gt;&gt; teammembers</span><br><span class="line">[<span class="string">'Rick'</span>, <span class="string">'Lily'</span>, <span class="string">'Bob'</span>, <span class="string">'Tom'</span>, <span class="string">'Lisa'</span>]</span><br></pre></td></tr></table></figure><h3 id="Remove-from-list"><a href="#Remove-from-list" class="headerlink" title="Remove from list"></a>Remove from list</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; teammembers.pop() <span class="comment"># Remove the last item from the list.</span></span><br><span class="line">&gt;&gt;&gt; teammembers</span><br><span class="line">[<span class="string">'Rick'</span>, <span class="string">'Lily'</span>, <span class="string">'Bob'</span>, <span class="string">'Tom'</span>]</span><br><span class="line">&gt;&gt;&gt; teammembers.pop(1) <span class="comment"># Remove the 2nd(index number 1) item from the list.</span></span><br><span class="line">&gt;&gt;&gt; teammembers</span><br><span class="line">[<span class="string">'Rick'</span>, <span class="string">'Bob'</span>, <span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure><h3 id="Change-the-value"><a href="#Change-the-value" class="headerlink" title="Change the value"></a>Change the value</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; teammembers(1)=<span class="string">'Lily'</span></span><br><span class="line">&gt;&gt;&gt; teammembers</span><br><span class="line">[<span class="string">'Rick'</span>, <span class="string">'Lily'</span>, <span class="string">'Tom'</span>]</span><br></pre></td></tr></table></figure><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>Python uses <code>()</code> to represent tuple, a tuple is a data type which is very similar to list, but you cannot edit the tuple once it is created.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; teammembers(<span class="string">'Rick'</span>,<span class="string">'Bob'</span>,<span class="string">'Tom'</span>)</span><br><span class="line">&gt;&gt;&gt; teammembers</span><br><span class="line">(<span class="string">'Rick'</span>, <span class="string">'Bob'</span>, <span class="string">'Tom'</span>)</span><br><span class="line">&gt;&gt;&gt; teammembers[1] <span class="comment"># Like list, we use `[]` and the index number to access items in tumple, you cannot use `()`.</span></span><br><span class="line"><span class="string">'Bob'</span></span><br></pre></td></tr></table></figure></p><h2 id="Why-use-tuple"><a href="#Why-use-tuple" class="headerlink" title="Why use tuple"></a>Why use tuple</h2><p>The restriction on tuple protects your data from unintentional editing.</p><h2 id="If"><a href="#If" class="headerlink" title="If"></a>If</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line"><span class="keyword">if</span> age &gt;= 18:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;=10:        <span class="comment"># elif is the short form of else if</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'teenager'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'kid'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装与配置记录</title>
      <link href="/2016/12/25/ubuntu-preparations/"/>
      <url>/2016/12/25/ubuntu-preparations/</url>
      
        <content type="html"><![CDATA[<p>前一段时间把自己的主力电脑从Win迁移到了Ubuntu，对中途所做的一些配置做简要记录，以为后续参考。</p><a id="more"></a><h2 id="硬件平台"><a href="#硬件平台" class="headerlink" title="硬件平台"></a>硬件平台</h2><p>惠普G4-2318tx: i5-3210; 500GB HDD; 4GB RAM。</p><h2 id="安装介质"><a href="#安装介质" class="headerlink" title="安装介质"></a>安装介质</h2><p>500GB移动硬盘。</p><p>后来尝试在一款更老一些的笔记本上（主板不支持UEFI）安装，发现无法从移动硬盘识别到操作系统，此前用同样的方法在该笔记本上安装Win7是可以正常进行的。原因未作深究，找了一个更为简单的方法：使用Rufus将iso文件写入到一个U盘上。详细步骤参考：<a href="https://www.ubuntu.com/download/desktop/create-a-usb-stick-on-windows" target="_blank" rel="noopener">How to create a bootable USB stick on Windows</a></p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>安装过程网上已有太多教程及解读，不再废话。</p><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><h3 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h3 id="系统清理"><a href="#系统清理" class="headerlink" title="系统清理"></a>系统清理</h3><p>Ubuntu自带了一系列的软件，但是有很多是基本上用不到的，虽说留着也占不了太多空间，但是作为一个强迫症患者，还是卸载了心里舒服：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove unity-webapps-common <span class="comment">#删除启动器上的亚马逊</span></span><br><span class="line">$ sudo apt-get remove simple-scan <span class="comment">#Ubuntu自带的一个扫描程序</span></span><br><span class="line">$ sudo apt-get remove gnome-mahjongg gnome-mines gnome-sudoku <span class="comment">#Ubuntu自带的一些小游戏</span></span><br><span class="line">$ sudo apt-get remove webbrowser-app <span class="comment">#Ubuntu自带的一个简单的浏览器，图标巨丑，无奈这东西在安装Unity Tweak Tool的同时也会被装上</span></span><br></pre></td></tr></table></figure><h3 id="系统美化"><a href="#系统美化" class="headerlink" title="系统美化"></a>系统美化</h3><p>清理干净之后离开始干活就不远了，无奈实在有点受不了Unity默认的主题样式，用惯了iOS之后觉得扁平相对于拟物虽然少了很多的细节，但是看起来干净，舒服是真的。</p><p>换主题之前，需要安装Unity Tweak Tool:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install unity-tweak-tool</span><br></pre></td></tr></table></figure></p><h4 id="安装Flatabulous主题"><a href="#安装Flatabulous主题" class="headerlink" title="安装Flatabulous主题:"></a>安装Flatabulous主题:</h4><ol><li>点击<a href="https://github.com/anmoljagetia/Flatabulous/releases/download/16.04.1/Flatabulous-Theme.deb" target="_blank" rel="noopener">下载deb安装包</a></li><li>下载之后直接双击安装。</li></ol><h4 id="安装图标包"><a href="#安装图标包" class="headerlink" title="安装图标包"></a>安装图标包</h4><p>一个好看的主题一定要有好看的图标相配套:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:noobslab/icons</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ultra-flat-icons</span><br></pre></td></tr></table></figure></p><h4 id="启用主题和图标"><a href="#启用主题和图标" class="headerlink" title="启用主题和图标"></a>启用主题和图标</h4><ol><li>打开Unity Tweak Tool。</li><li>进入Themes。<br><img src="/images/unity-tweak-tool.png" alt="Unity Tweak Tool"></li><li>选择Flatabulous。<br><img src="/images/utt-theme.png" alt="Flatabulous"></li><li>切换到Icons。</li><li>选择Ultra-flat。<br><img src="/images/utt-icons.png" alt="Ultra flat"></li></ol><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/screenshot.png" alt="Screenshot"></p><h3 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h3><h4 id="Dock"><a href="#Dock" class="headerlink" title="Dock"></a>Dock</h4><p>自从习惯了Mac上的Dock，便离不开这种东西，无奈以前Win7上表现良好的Rocket Dock在Win10上各种水土不服，好在Ubuntu上还是有好用的Dock的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docky</span><br></pre></td></tr></table></figure><p>效果图:</p><p><img src="/images/docky.png" alt="Docky"></p><h4 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h4><p>先下载deb软件包，然后双击安装就可以了，虽说谷歌在国内是不能上的，但是下面的命令还是能执行的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p>安装完毕后：</p><ol><li>打开Settings-&gt;Advanced sync settings，选择Choose what to sync，然后把Themes前面的对勾取消。</li><li>在Settings-&gt; Appearance下，点击Use GTK+ theme，并且选中Use system title bar and border。</li></ol><h4 id="Spotify"><a href="#Spotify" class="headerlink" title="Spotify"></a>Spotify</h4><p>虽然网易云音乐在国内来说还不错，但是听来听去也就是那几首歌，所谓的私人电台推荐的音乐也不全是符合自己口味的，反倒是Spotify上，经常能有惊喜，推荐的音乐也比较对口味。</p><p>Spotify安装方法，参考<a href="https://www.spotify.com/sg-en/download/linux/" target="_blank" rel="noopener">官网链接</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. Add the Spotify repository signing key to be able to verify downloaded packages</span></span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys BBEBDCB318AD50EC6865090613B00F1FD2C19886</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Add the Spotify repository</span></span><br><span class="line"><span class="built_in">echo</span> deb http://repository.spotify.com stable non-free | sudo tee /etc/apt/sources.list.d/spotify.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. Update list of available packages</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. Install Spotify</span></span><br><span class="line">sudo apt-get install spotify-client</span><br></pre></td></tr></table></figure><h4 id="Pinta"><a href="#Pinta" class="headerlink" title="Pinta"></a>Pinta</h4><p>类似Windows中的画图应用，主要用来处理简单的图片标注，可以通过Ubuntu自带的软件商店安装。</p><p>关于Ubuntu上其它的图片处理应用，可以参考另一篇文章：<a href="http://kuyeduwu.github.io/2016/12/20/Image-Tools-On-Ubuntu/" target="_blank" rel="noopener">Ubuntu下的图片编辑程序</a></p><h4 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h4><p>Sublime对于我来讲属于：看了一眼之后便再也看不上其它编辑器。</p><p>安装方式也很简单，虽说有ppa可以用，但是还是习惯于去官网下载deb包，然后手动安装。</p><p>既然用Sublime，肯定少不了Package Control，参考<a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">官网说明</a>进行安装。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VBA简明教程之二 - VBA基础概念和宏的录制</title>
      <link href="/2016/12/23/vba-basic-guide-2/"/>
      <url>/2016/12/23/vba-basic-guide-2/</url>
      
        <content type="html"><![CDATA[<h2 id="示例文件"><a href="#示例文件" class="headerlink" title="示例文件"></a>示例文件</h2><p>以下图为例，准备3份不同的Excel文件，分别命名为“2016 Revenues”，“2015 Revenues”和“2014 Revenues”。</p><p>每份文件只有B3:M5区域的数字不同，以及A1单元格内的标题内容不同，其它内容保持一致。</p><a id="more"></a><p><img src="/images/sample-data.png" alt="Sample Data"></p><h2 id="VBA"><a href="#VBA" class="headerlink" title="VBA"></a>VBA</h2><p>关于VBA的基础概念，需要知道以下几点：</p><ol><li>VBA全称为：Visual Basic for Application，是以Visual Basic为基础的一种脚本语言。</li><li>VBA需要依附于微软办公套件（MS Office），并不独立存在。</li><li>针对常用的MS Office四大件(Word, Excel, Outlook, Powerpoint)，VBA功能存在于Developer(开发者工具)菜单下。<ul><li>默认情况下，Developer菜单是不显示的，需要用户依次点击File，Options，进入Customize Ribbon(自定义功能区)设置，将Developer选中。此方法适用于MS Office2010及以上版本。</li></ul></li></ol><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><p>所谓“宏”，其英文版原文为“Macro”，宏的实际内容就是一条一条自动生成的VBA语句。</p><p>在我们正式开始介绍VBA语句之前，可以将宏理解为一系列操作的集合，在运行宏的时候，实际上是按照顺序自动执行其中的所有操作。针对同样的操作步骤，宏自动执行的速度要远快于手动操作的速度。</p><p>正是由于宏可以自动生成VBA语句，在正式开始学习VBA之前，有必要了解一下宏的基本操作。</p><h3 id="宏的录制"><a href="#宏的录制" class="headerlink" title="宏的录制"></a>宏的录制</h3><h4 id="开始录制"><a href="#开始录制" class="headerlink" title="开始录制"></a>开始录制</h4><p>有两种方式可以开始宏的录制：</p><ol><li>通过点击Developer菜单下的<strong>Record Macro</strong>命令。</li><li>直接点击Excel窗口左下角的<strong>Record Macro</strong>的图标：</li></ol><p><img src="/images/record-macro.png" alt="Record Macro"></p><h4 id="设置宏的基本信息"><a href="#设置宏的基本信息" class="headerlink" title="设置宏的基本信息"></a>设置宏的基本信息</h4><p>点击录制按钮之后会遇到一个窗口：</p><p><img src="/images/macro-description.png" alt="Macro Description"></p><h5 id="Macro-name"><a href="#Macro-name" class="headerlink" title="Macro name"></a>Macro name</h5><p>为将要录制的宏提供一个名字，Excel中对宏的名字有如下要求：</p><ol><li>只能以字母作为开头。</li><li>不能包括空格以及其他特殊符号。</li><li>不能和Excel内置的一些公式名字或其它关键字冲突。</li><li>不能为空。</li></ol><h5 id="Shortcut-key"><a href="#Shortcut-key" class="headerlink" title="Shortcut key"></a>Shortcut key</h5><p>为将要录制的宏指定一个快捷键，只能使用字母，可以留空。</p><p><em>注意：在设定快捷键的时候千万小心。因为默认的组合键是使用Ctrl+字母，所以很容易覆盖掉系统默认快捷键，譬如说，系统默认Ctrl+S是保存的快捷键，但是如果这里指定字母为“s”，那么Ctrl+S将不再执行保存功能，而是执行你所录制的宏。如果真的想在这里输入“s”的话，可以输入大写的“s”，从而使组合快捷键变为Ctrl+Shift+S，这个组合键曾经作为另存为的快捷键存在于2003版的Office当中，自2007版本开始便取消了，所以不用担心存在冲突。</em></p><h5 id="Store-macro-in"><a href="#Store-macro-in" class="headerlink" title="Store macro in"></a>Store macro in</h5><p>宏的存储位置，一般会提供三个选项:</p><ol><li>This Workbook - 默认选项，将宏保存在当前工作簿中。</li><li>New Workbook - 将宏保存在一个新的工作簿中。</li><li>Personal Macro Workbook - 将宏保存在一个独立的工作簿中。</li></ol><p>假设当前的工作簿的名字叫做<strong>FileA</strong>，宏的名字叫做<strong>MacroA</strong>，以此解释一下三个选项的区别：</p><ol><li>录制的宏直接保存在<strong>FileA</strong>当中，无论谁打开<strong>FileA</strong>都可以找到并运行<strong>MacroA</strong>。如果希望将<strong>MacroA</strong>用于其它文件，需要同时打开<strong>FileA</strong>。</li><li>录制的宏保存在一个新的文件——<strong>FileB</strong>中，<strong>FileA</strong>中不存在任何关于<strong>MacroA</strong>的内容。如果希望在其它工作薄中运行<strong>MacroA</strong>，需要同时打开<strong>FileB</strong>。</li><li>录制的宏保存在一个叫做“Personal Macro Workbook”的隐藏文件中，<strong>FileA</strong>中不存在任何关于<strong>MacroA</strong>的内容，只要在同一台电脑上，以后任何时候打开任何<strong>任何Excel文件</strong>，都可以运行<strong>MacroA</strong>。</li></ol><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>为将要录制的Macro提供一些描述，可以留空。</p><h4 id="录制进行中"><a href="#录制进行中" class="headerlink" title="录制进行中"></a>录制进行中</h4><p>设置完Macro name等基本信息，点击OK关闭“Record Macro”窗口之后，就已经进入录制状态，此时在Excel中的<strong>大部分</strong>操作都会被记录下来。</p><p>录制过程中并没有一个明确的状态指示，只有两点：</p><ol><li>Developer菜单下的<strong>Record Macro</strong>命令变为<strong>Stop Recording</strong>。</li><li>Excel窗口左下角的<strong>Record Macro</strong>命令变为<strong>Stop Recording</strong>的图标。</li></ol><h4 id="结束录制"><a href="#结束录制" class="headerlink" title="结束录制"></a>结束录制</h4><p>点击<strong>Stop Recording</strong>按钮，即可结束录制。</p><h3 id="宏的运行"><a href="#宏的运行" class="headerlink" title="宏的运行"></a>宏的运行</h3><p>点击Developer菜单下的<strong>Macros</strong>命令，即可看到此前已经录制的宏，选择任何一个，点击<strong>Run</strong>即可在当前工作簿中运行选中的宏。</p><h3 id="带有宏的工作薄的保存"><a href="#带有宏的工作薄的保存" class="headerlink" title="带有宏的工作薄的保存"></a>带有宏的工作薄的保存</h3><p>根据录制时所选择的存储位置的不同，在保存当前工作薄的时候会有不同的提示：</p><h4 id="宏保存在当前工作薄-This-Workbook"><a href="#宏保存在当前工作薄-This-Workbook" class="headerlink" title="宏保存在当前工作薄(This Workbook)"></a>宏保存在当前工作薄(This Workbook)</h4><p>收到如下提示：</p><p><img src="/images/save-macro-warning.png" alt="Excel Message"></p><p>原因在于从Office 2007开始，Excel不能在普通的工作簿中保存宏信息，如果需要保存宏信息，需要把工作薄的格式修改为Macro-Enabled Workbook(*.xlsm)。</p><p>在收到该提示时，如果点“Yes”，那么所录制的宏信息会丢失，只能够保存针对工作表内容的更改；如果要保留宏信息，需要点“No”，然后在弹出的“Save As”对话框中，将“Save as type”选择为Macro-Enabled Workbook。</p><h4 id="宏保存在新工作簿-New-Workbook"><a href="#宏保存在新工作簿-New-Workbook" class="headerlink" title="宏保存在新工作簿(New Workbook)"></a>宏保存在新工作簿(New Workbook)</h4><p>在保存当前工作簿时，不会有错误提示，可以正常保存，但是一定要注意要将储存有宏信息的新工作簿保存为Macro-Enabled Workbook，道理同上。</p><h4 id="宏保存在Personal-Macro-Workbook"><a href="#宏保存在Personal-Macro-Workbook" class="headerlink" title="宏保存在Personal Macro Workbook"></a>宏保存在Personal Macro Workbook</h4><p> 在保存当前工作簿时候，不会有错误提示，可以正常保存，但是当要退出Excel程序的时候，会收到如下错误提示：</p><p> <img src="/images/save-personal-macro-book.png" alt="Excel Message"></p><p>此时应当点击”Save”，否则我们录制的宏将不会被保存。</p><p><em>注意：之所以在退出Excel程序的时候才会收到这样的提示，是因为Personal Macro Workbook是一个隐藏的Excel文件，正常情况下无法直接操作这个文件。</em></p><blockquote><p>动手练习：</p></blockquote><blockquote><p>关闭所有已打开的Excel程序，然后打开“2016 Revenues”。</p></blockquote><blockquote><p>在“2016 Revenues”内录制宏，宏的名字为“Formatting”，不设置快捷键，保存位置为当前工作薄，Description留空。</p></blockquote><blockquote><p>录制以下操作：</p></blockquote><blockquote><ol><li>设置A1:M1为合并并居中，行高30，内容垂直居中，字号20。</li><li>设置A2:M2填充色为淡蓝色。</li><li>设置B3:M5数字格式为“Accounting”。</li><li>在A6输入“Total:”，在第六行，B到M每一列进行求和。</li><li>设置A6:M6字体加粗，上边框线为双线。</li><li>在L8输入“Grand Total:”，在M8对第六行进行求和。</li><li>设置第八行字体加粗。</li><li>设置所有列，自动适应列宽。</li></ol></blockquote><blockquote><p>结束录制。</p></blockquote><blockquote><p>不要关闭“2016 Revenues”，打开其余两个工作簿，并尝试运行“Formatting”宏。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Office Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VBA简明教程之一 - 引子</title>
      <link href="/2016/12/22/vba-basic-guide/"/>
      <url>/2016/12/22/vba-basic-guide/</url>
      
        <content type="html"><![CDATA[<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>工作了几年，写了些许VBA，提升了一些效率，也积累了一些写VBA的经验，身边也会有些人向我请教一些VBA的问题，本着在记录自己学习过程的同时也能给别人些许参考的目的，给自己挖了这么一个坑。</p><a id="more"></a><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>本篇教程的大部分内容基于Excel中的VBA，后期会穿插一些Word，Outlook中的内容。</p><h3 id="受众"><a href="#受众" class="headerlink" title="受众"></a>受众</h3><p>本教程的受众定位于：</p><ol><li>工作中需要频繁用到Excel。</li><li>受限于工作环境，不能自由选择其他的高级工具。</li><li>具有Excel的基本知识。</li></ol><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>阅读本教程<strong>不需要具有编程基础</strong>，但是，阅读本教程需要<strong>简单的英语能力</strong>。</p><p>因为工作性质的关系，平时处理的主要是英文数据，因此，本教程中Office程序版本，以及所有的示例文件，均采用英文。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>本教程目录暂定为：</p><ol><li><p>基础部分</p><ul><li>VBA基础概念和宏的录制</li><li>修改录制的宏</li><li>VBA编辑器的使用</li><li>VBA语言基础 - 过程和函数</li><li>VBA语言基础 - 对象， 方法和属性</li><li>VBA语言基础 - 变量</li><li>VBA语言基础 - 判断</li><li>VBA语言基础 - 循环</li></ul></li><li><p>Excel VBA中的常用对象</p><ul><li>Workbook对象</li><li>Worksheet对象</li><li>Range对象</li><li>Cell对象</li></ul></li><li><p>Excel VBA中的常用事件 - 即VBA代码的触发</p><ul><li>Workbook事件</li><li>Worksheet事件</li></ul></li><li><p>用户窗体</p><ul><li>按钮</li><li>文本框</li><li>下拉菜单</li><li>单选框</li><li>复选框</li></ul></li><li><p>高级应用</p><ul><li>VBA对图表，数据透析表的操作</li><li>数组和集合</li><li>字典</li><li>类模块</li></ul></li><li><p>其它Office应用中的VBA</p><ul><li>Word</li><li>Outlook</li></ul></li></ol><h3 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h3><p>尽量每日一更。</p><h2 id="内容结构"><a href="#内容结构" class="headerlink" title="内容结构"></a>内容结构</h2><p>针对某一期教程，如果需要示例文件的话，并不提供示例文件的下载，而是会在教程开头列出示例文件的内容，需要诸位童鞋根据内容自行创建。</p><p>在每一期教程的结尾，一般会有动手练习，需要配合示例文件完成。</p><h2 id="啰嗦"><a href="#啰嗦" class="headerlink" title="啰嗦"></a>啰嗦</h2><p>其实很多时候自己也一直在纠结一个问题：在云计算，大数据的部署成本越来越低，Python等脚本语言越来越流行，GitHub上各种开源工具越来越多的时代，VBA作为一个有着将近20年的历史，行将淘汰的语言，到底还有多大的意义？而近几年在线表格的兴起，更进一步动摇了我对VBA的信心。</p><p>然而，蓝图永远是美好的，现实永远是骨感的：<strong>并不是每一个关于Excel的任务都能有机会用到各种炫酷的新工具</strong>。这或许是来自于你老板对组织内部软件的限制，出于网络风险的考虑，禁止你使用已有工具以外的任何工具；或许是来自收益与成本的不对等，你只是临时需要整理5,000行数据，你老板肯定不愿意为此去支付一笔云服务账单，他觉得你即便是人工一行一行的来也未尝不可；或许是来自于为未知世界的担忧，你只是临时需要整理5,000行数据，恰巧有某个开源脚本可以完成，然而各种包管理，各种依赖让你一头雾水；诸如此类的情景不胜枚举。</p><p>所以说，当我们只能利用现有工具，而又想要一定程度的提升效率的话，VBA似乎成了一个最佳选择。</p>]]></content>
      
      
      <categories>
          
          <category> Office Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本入门之五 - 循环 - select</title>
      <link href="/2016/12/21/sh-Basic-Usage-5/"/>
      <url>/2016/12/21/sh-Basic-Usage-5/</url>
      
        <content type="html"><![CDATA[<p>其实很多编程语言中都有类似于<code>select</code>的语句，譬如说<code>vb</code>中就有<code>select case</code>，只不过更多的偏向于判断的功能，在shell中的<code>select</code>则更多的偏向于循环的功能。</p><a id="more"></a><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">select 新变量名 <span class="keyword">in</span> <span class="string">"选择项1"</span> <span class="string">"选择项2"</span> ... ; <span class="keyword">do</span> <span class="comment">#select开始</span></span><br><span class="line">commands1</span><br><span class="line">commands2</span><br><span class="line"><span class="keyword">done</span> <span class="comment">#select结束</span></span><br></pre></td></tr></table></figure><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Which is your favourite OS?"</span></span><br><span class="line"></span><br><span class="line">select var <span class="keyword">in</span> <span class="string">"Ubuntu"</span> <span class="string">"Fedora"</span> <span class="string">"Windows"</span> <span class="string">"OS X"</span>; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"You have selected <span class="variable">$&#123;var&#125;</span>."</span></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images/select-1.png" alt="Select Result"></p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p><code>select</code>命令做了如下操作：</p><ol><li>把<code>in</code>后面的内容自动用<code>1,2,3,4...</code>编号并列出菜单。</li><li>列出菜单之后，自动等待输入——以<code>#?</code>为提示符。</li><li>用户输入后，自动将相应变量赋值给<code>var</code>。</li><li><code>break</code>的作用在于：一旦用户作出了选择就跳出<code>select</code>循环，如果没有<code>break</code>，在每次显示”You have selected …”之后会再次让用户选择，并一直循环下去。</li></ol><h2 id="select命令配合case命令："><a href="#select命令配合case命令：" class="headerlink" title="select命令配合case命令："></a><code>select</code>命令配合<code>case</code>命令：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"What is your favourite OS?"</span></span><br><span class="line"></span><br><span class="line">select var <span class="keyword">in</span> <span class="string">"Ubuntu"</span> <span class="string">"Fedora"</span> <span class="string">"Windows"</span> <span class="string">"OS X"</span> <span class="string">"Red Hat"</span>; <span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$var</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">"Ubuntu"</span>|<span class="string">"Fedora"</span>|<span class="string">"Red Hat"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"You selected Linux."</span>;;</span><br><span class="line"><span class="string">"Windows"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"You selected Microsoft."</span>;;</span><br><span class="line"><span class="string">"OS X"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"You selected Apple."</span>;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Invalid selection."</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images/select-2.png" alt="运行结果"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><code>select</code>命令是bash的扩展应用，这意味着：</p><ol><li>脚本文件的第一行如果是<code>#!/bin/sh</code>，可能无法工作，应改为<code>#!/bin/bash</code>。</li><li>如果使用<code>sh tst.sh</code>命令执行脚本文件，无法工作，错误提示：<code>select: not found</code>，应使用<code>. tst.sh</code>或者<code>bash tst.sh</code>执行。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下的图片编辑程序</title>
      <link href="/2016/12/20/Image-Tools-On-Ubuntu/"/>
      <url>/2016/12/20/Image-Tools-On-Ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>就是因为上一篇文章<a href="http://kuyeduwu.github.io/2016/12/20/iTunes-Podcasts-on-Ubuntu/#more" target="_blank" rel="noopener">用Ubuntu自带播放器Rhythmbox收听iTunes播客</a>，需要在Ubuntu下找一个类似于Windows中画图的图片处理程序，可以做简单的圈点以及文字标注。</p><a id="more"></a><p>尝试了几款软件，确实找到了符合自己需求的，但是把中间尝试的各个软件的特点记录下来，用作以后的参考。</p><h2 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h2><p>这个是Ubuntu自带的截图软件，如果系统语言是中文的话，名字应该就是叫做“截图”，基本功能如下：</p><ol><li>全屏截图。</li><li>当前窗口截图。</li><li>自选区域截图。</li><li>针对当前窗口截图，可以选择添加阴影或者是边框效果。</li></ol><h2 id="Shotwell-Photo-Manager"><a href="#Shotwell-Photo-Manager" class="headerlink" title="Shotwell Photo Manager"></a>Shotwell Photo Manager</h2><p><img src="/images/Shotwell.png" alt="Shotwell"></p><p>也是Ubuntu自带软件，相当于一个照片管理软件，类似于以前谷歌出品的Picasa，不过功能要少的多，基本功能包括：</p><ol><li>从文件夹或者其它程序导入图片。</li><li>图片旋转。</li><li>图片剪切。</li><li>图片角度修正。</li><li>去红颜。</li><li>颜色调整。</li><li>一键增强。</li></ol><h2 id="GIMP-Image-Editor"><a href="#GIMP-Image-Editor" class="headerlink" title="GIMP Image Editor"></a>GIMP Image Editor</h2><p><img src="/images/GIMP.png" alt="GIMP"></p><p>非Ubuntu自带软件，可以通过Ubuntu自带的软件商店进行安装。</p><p>GIMP属于相对比较高级的图片编辑程序，提供了类似于Photoshop的编辑功能，具体功能就不必列举了，还是直接看截图吧，相信用过PS的一看就能明白这个软件的强大，重点是免费哦。</p><p><img src="/images/GIMP1.png" alt="GIMP Functions"></p><h2 id="Pinta-Image-Editor"><a href="#Pinta-Image-Editor" class="headerlink" title="Pinta Image Editor"></a>Pinta Image Editor</h2><p>这个才是我需要的软件。</p><p>提供了类似于Windows中画图软件的基础编辑功能，用来做图片标注也比较方便。</p><p><img src="/images/pinta.png" alt="Pinta"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Ubuntu自带播放器Rhythmbox收听iTunes播客</title>
      <link href="/2016/12/20/iTunes-Podcasts-on-Ubuntu/"/>
      <url>/2016/12/20/iTunes-Podcasts-on-Ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>众所周知，苹果播客里面有很多优秀的或者是很有意思的内容，有苹果手机的话，想听这些播客内容当然很方便；如果要是开电脑的话，无论是Windows还是Mac，都有iTunes可以用，也可以同步手机里的播客内容；但是，如果你的电脑像我一样是Ubuntu怎么办？</p><a id="more"></a><h2 id="软件选择"><a href="#软件选择" class="headerlink" title="软件选择"></a>软件选择</h2><p>其实既然选择了Ubuntu系统，娱乐功能自然是居于次要地位的，所以说如果能用系统自带软件解决的话，自然是最好的。</p><p>Ubuntu自带的关于音乐的软件叫做Rhythmbox，其实我一直没搞明白这个东西的英文发音到底是什么，不过也无所谓了，反正只要是支持播客订阅就好了。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>想在其他客户端上收听播客内容的话，需要先知道这个播客的真实地址，好在iTunes播客的真实地址并不难获取。</p><ol><li>打开iTunes客户端，进入到已订阅的播客列表。<br><img src="/images/iTunes.jpg" alt="iTunes"></li><li>在某一个播客的图标上右击，选择“Copy Podcast URL”。<br><img src="/images/iTunes-right-click.jpg" alt="iTunes-Right-Click"></li><li>至于说这个地址怎么拿到Ubuntu系统上就见仁见智了，你可以开一个FTP，你可以用iCloud的同步功能，甚至可以用网页版微信。</li><li>回到Ubuntu，打开Rhythmbox。</li><li>点击左侧的“Podcasts”，然后点击右侧的“Add”<br><img src="/images/Rhythmbox.png" alt="Rhythmbox"></li><li>在搜索框中填入第2步获得的播客地址，然后点击“Search”。</li><li>稍等片刻下面的列表中就会出现播客的名字和可订阅的剧集。</li><li>点击“Search”旁边的“Subscribe”，从而把当前播客添加到订阅列表。</li><li>最后点击“Subscribe”旁边的“Close”按钮，就会回到播客列表，现在就可以在Rhythmbox中收听播客了。<br><img src="/images/Rhythmbox-Add-Podcast.png" alt="Rhythmbox"></li></ol><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><ol><li>播放完当前剧集之后会自动停止播放，不会自动播放下一集。</li><li>Phythmbox毕竟还只是个音乐播放软件，视频播客是不能播放的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Accessories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本入门之四 - 其它判断</title>
      <link href="/2016/12/20/sh-Basic-Usage-4/"/>
      <url>/2016/12/20/sh-Basic-Usage-4/</url>
      
        <content type="html"><![CDATA[<h2 id="amp-amp-和"><a href="#amp-amp-和" class="headerlink" title="&amp;&amp;和||"></a><code>&amp;&amp;</code>和<code>||</code></h2><p>除了使用<code>if</code>以外，在shell中还可以使用<code>&amp;&amp;</code>和<code>||</code>来执行判断。</p><a id="more"></a><h3 id="基本含义-amp-amp"><a href="#基本含义-amp-amp" class="headerlink" title="基本含义&amp;&amp;"></a>基本含义<code>&amp;&amp;</code></h3><p><code>&amp;&amp;</code>本身表示“和”（AND）预算，语法格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 &amp;&amp; command2</span><br></pre></td></tr></table></figure><p>表示：当且仅当<code>command1</code>的返回结果为真时，执行<code>command2</code>。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>如果当前用户不是superuser，退出执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">[ ! $(id -u) -eq <span class="string">"0"</span> ] &amp;&amp; &#123;<span class="built_in">read</span> -p <span class="string">"You are no the superuser. Hit [Enter] to exit."</span> enter; <span class="built_in">exit</span> 1;&#125;</span><br></pre></td></tr></table></figure><p><code>read -p</code>：<code>read</code>命令是用来接收用户输入的，<code>-p</code>会在用户输入之前显示一条提示语句。</p><p><code>{}</code>：用来将两个命令组合到一起，两个命令之间用<code>;</code>分隔。</p><h3 id="基本含义"><a href="#基本含义" class="headerlink" title="基本含义||"></a>基本含义<code>||</code></h3><p><code>||</code>本身表示“或”（OR）预算，语法格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 || command2</span><br></pre></td></tr></table></figure><p>表示：当且仅当<code>command1</code>的返回结果不为真（non-zero exit status）时，执行<code>command2</code>，若<code>command1</code>返回结果为真，则不执行<code>command2</code>，换句话说就是：要么成功的执行<code>command1</code>，要么就执行<code>command2</code>。</p><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><p>如果当前用户不是superuser，提示用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">[ $(id -u) -eq <span class="string">"0"</span> ] || <span class="built_in">echo</span> <span class="string">"You are not the superuser."</span></span><br></pre></td></tr></table></figure><h3 id="amp-amp-和-一起用"><a href="#amp-amp-和-一起用" class="headerlink" title="&amp;&amp;和||一起用"></a><code>&amp;&amp;</code>和<code>||</code>一起用</h3><p>判断当前用户，并根据情况提示不同的语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ $(id -u) -eq <span class="string">"0"</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"You are the superuser."</span> || <span class="built_in">echo</span> <span class="string">"You are not the superuser."</span></span><br></pre></td></tr></table></figure><h2 id="case"><a href="#case" class="headerlink" title="case"></a><code>case</code></h2><p>用来匹配字符串，根据不同的字符串执行不同的命令，基本语法格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$variable</span>-name <span class="keyword">in</span></span><br><span class="line">  pattern1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">  pattern2)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></p><p>例如：根据不同的人名返回不同的年龄，创建一个<code>age.sh</code>文件并写入如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if no name provided, set pname to blank.</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span>]; <span class="keyword">then</span></span><br><span class="line">  pname=<span class="string">"blank"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  pname=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$pname</span> <span class="keyword">in</span></span><br><span class="line">  <span class="string">"rick"</span>) <span class="built_in">echo</span> <span class="string">"Rick is 20 years old."</span>;;</span><br><span class="line">  <span class="string">"angel"</span>) <span class="built_in">echo</span> <span class="string">"Angel is 18 years old."</span>;;</span><br><span class="line">  <span class="string">"david"</span>) <span class="built_in">echo</span> <span class="string">"David is 22 years old."</span>;;</span><br><span class="line">  <span class="string">"blank"</span>) <span class="built_in">echo</span> <span class="string">"You provided a blank name"</span>;;</span><br><span class="line">  *) <span class="built_in">echo</span> <span class="string">"Sorry, i don't know the age for <span class="variable">$rental</span>."</span>;;</span><br></pre></td></tr></table></figure><p>然后分别在终端输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sh age.sh</span><br><span class="line">$ sh age.sh rick</span><br><span class="line">$ sh age.sh angel</span><br><span class="line">$ sh age.sh petter</span><br></pre></td></tr></table></figure></p><p>得到的输出依次如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You provided a blank name</span><br><span class="line">Rick is 20 years old.</span><br><span class="line">Angel is 18 years old.</span><br><span class="line">Sorry, i don<span class="string">'t know the age for petter</span></span><br></pre></td></tr></table></figure></p><ul><li><code>$1</code>：表示传入shell的第一个参数</li><li><code>*)</code>：表示除了前面所列出的其它的任何情况。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本入门之三 - 判断</title>
      <link href="/2016/12/19/sh-Basic-Usage-3/"/>
      <url>/2016/12/19/sh-Basic-Usage-3/</url>
      
        <content type="html"><![CDATA[<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>if语句根据不同的条件执行不同的命令，有三种不同的形式，不过都是以<code>if</code>开始，以<code>fi</code>结束：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 形式一</span></span><br><span class="line"><span class="keyword">if</span> condition ; <span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 形式二</span></span><br><span class="line"><span class="keyword">if</span> condition ; <span class="keyword">then</span></span><br><span class="line">  commands1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  commands2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 形式三</span></span><br><span class="line"><span class="keyword">if</span> condition1 ; <span class="keyword">then</span></span><br><span class="line">  commands1</span><br><span class="line">elfi condition2 ; <span class="keyword">then</span></span><br><span class="line">  commands2</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>在第一种形式中，如果<code>condition</code>的结果为真，则执行<code>commands</code>，否则不执行任何操作。</p><p>在第二种形式中，如果<code>condition</code>的结果为真，则执行<code>commands1</code>，否则执行<code>commands2</code>。</p><p>在第三种形式中，如果<code>condition1</code>的结果为真，则执行<code>commands1</code>，否则判断<code>condition2</code>，如果结果为真，则执行<code>commands2</code>，否则不执行任何操作。</p><h3 id="关于condition"><a href="#关于condition" class="headerlink" title="关于condition"></a>关于<code>condition</code></h3><p>先举个栗子，如果我们在C语言中要判断一个变量是不是大于100，可能会直接写<code>if ( a &gt; 100 )</code>，直接用数学表达式来表示条件，可是在shell当中，事情变得有些不一样。</p><h4 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a><code>test</code>命令</h4><p>在shell的<code>condition</code>中，需要用<code>test</code>命令来获取<code>condition</code>的结果，<code>test</code>命令有两种形式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 形式一</span></span><br><span class="line"><span class="built_in">test</span> expression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 形式二</span></span><br><span class="line">[ expression ]</span><br></pre></td></tr></table></figure><p>一般在<code>if</code>语句中，比较多的采用形式二，需要注意的是，在<code>[</code>后面一定要跟一个空格，在<code>]</code>前面也需要有一个空格。</p><h4 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h4><p>shell中的比较运算也与C语言等编译型语言有些不同：</p><ol><li><p>字符串比较：</p><ul><li>内容相同 - <code>stra = strb</code></li><li>内容不同 - <code>stra != strb</code></li><li>字符串长度不为零 - <code>-n str</code></li><li>字符串长度为零 - <code>-z str</code></li></ul></li><li><p>数字比较</p><ul><li>相等 - <code>int1 -eq int2</code></li><li>不等 - <code>int1 -ne int2</code></li><li>大于 - <code>int1 -gt int2</code></li><li>小于 - <code>int1 -lt int2</code></li><li>大于等于 - <code>int1 -ge int2</code></li><li>小于等于 - <code>int1 -le int2</code></li></ul><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>综上所述，在shell中如果要执行类似C语言中<code>if ( a &gt; 100 )</code>的判断，应当写作<code>if [ $a -gt &quot;100&quot; ]</code>。</p><p>一个完整的判断变量大小的shell脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">a=50</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -gt <span class="string">"100"</span> ];<span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"a is greater than 100"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"a is not greater than 100"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="一些其它判断"><a href="#一些其它判断" class="headerlink" title="一些其它判断"></a>一些其它判断</h3><h4 id="关于文件的判断"><a href="#关于文件的判断" class="headerlink" title="关于文件的判断"></a>关于文件的判断</h4><ul><li><code>-d file</code> - 判断是否是目录</li><li><code>-e file</code> - 判断文件是否存在</li><li><code>-f file</code> - 判断文件是否存在并且是正规文件</li><li><code>-L file</code> - 判断文件是否为链接</li><li><code>-r file</code> - 判断文件是否对当前用户可读</li><li><code>-w file</code> - 判断文件是否对当前用户可写</li><li><code>-x file</code> - 判断文件是否对当前用户可执行</li><li><code>file1 -nt file2</code> - 判断file1是否比file2新</li><li><p><code>file2 -ot file2</code> - 判断file1是否比file2旧</p><p>例如，判断<code>/etc/</code>目录下是否存在<code>shadow</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="keyword">if</span> <span class="string">"/etc/shadow"</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"shadow file exists."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"no shadow file."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="判断是否超级用户"><a href="#判断是否超级用户" class="headerlink" title="判断是否超级用户"></a>判断是否超级用户</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $(id -u) != <span class="string">"0"</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"You are not the superuser."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"You are the superuser."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本入门之二 - 变量</title>
      <link href="/2016/12/15/sh-Basic-Usage-2/"/>
      <url>/2016/12/15/sh-Basic-Usage-2/</url>
      
        <content type="html"><![CDATA[<p>任何一种编程语言都有变量，shell脚本也不例外。</p><h2 id="基本约定"><a href="#基本约定" class="headerlink" title="基本约定"></a>基本约定</h2><ol><li><p>变量默认全都是字符串</p><p>也就是说如果有一个变量<code>a=1</code>，当执行<code>echo $a + 1</code>的时候，输出结果是<code>1 + 1</code>，而不是<code>2</code>。</p></li><li><p>变量不需要事先声明</p></li></ol><a id="more"></a><h2 id="变量名约定"><a href="#变量名约定" class="headerlink" title="变量名约定"></a>变量名约定</h2><ol><li><p>由数字，大小写字母，下划线(<code>_</code>)组成</p></li><li><p>不能以数字开头</p></li></ol><p>也就是说变量名应当符合正则表达式：<code>[a-zA-Z_][a-zA-Z0-9_]+</code></p><h2 id="变量的赋值和引用"><a href="#变量的赋值和引用" class="headerlink" title="变量的赋值和引用"></a>变量的赋值和引用</h2><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><ol><li><p>因为变量不需要声明，所以对变量进行赋值的过程实际上也是创建变量的过程。</p></li><li><p>使用<code>=</code>对变量进行赋值。</p></li><li><p>赋值的时候<code>=</code>两边不能有任何空格</p></li><li><p><code>=</code>右边的值可以不加引号，但是如果其中包含空格，则需要加引号</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ a=hello <span class="comment">#变量的值可以不用引号</span></span><br><span class="line">$ a=<span class="string">"hello world"</span> <span class="comment">#如果值中包含空格，则需要引号</span></span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ol><li><p>对变量进行引用的时候，在其名字前面加<code>$</code></p></li><li><p>对变量进行引用的时候，可以在引号内部进行</p></li><li><p>如果引用的时候，变量名后面紧跟有其它字符，可能造成混淆，可以用<code>{}</code>将变量名包括起来</p></li></ol><p>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ num=2</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"this is the <span class="variable">$&#123;num&#125;</span>nd"</span></span><br></pre></td></tr></table></figure></p><h2 id="变量的数学运算"><a href="#变量的数学运算" class="headerlink" title="变量的数学运算"></a>变量的数学运算</h2><p>前面说过，变量默认全是字符串，也就是说像下面的例子是不会输出<code>2</code>的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ var=1</span><br><span class="line">$ var=<span class="variable">$var</span>+1</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var</span> <span class="comment">#输出结果为 1+1</span></span><br></pre></td></tr></table></figure><p>但是编程是离不开数学运算的，即便是脚本编程，所以怎么办呢？</p><p>方法肯定是有的，而且根据脚本文件的第一行内容的不同，会有不同的解决方法。</p><p>如果第一行是<code>#!/bin/sh</code>，可以用这样的方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ var=1</span><br><span class="line">$ var=$((var+1))</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var</span> <span class="comment">#此时的输出结果为2</span></span><br></pre></td></tr></table></figure></p><p>如果第一行是<code>#!/bin/bash</code>，可以用下面的方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ var=1</span><br><span class="line">$ ((var+=1))</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var</span></span><br></pre></td></tr></table></figure></p><p>或者也可以<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ var=1</span><br><span class="line">$ <span class="built_in">let</span> <span class="string">'var=var+1'</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本入门之一 - 基础</title>
      <link href="/2016/12/14/sh-Basic-Usage-1/"/>
      <url>/2016/12/14/sh-Basic-Usage-1/</url>
      
        <content type="html"><![CDATA[<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>如果有一个sh文件：test.sh，只需要执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh test.sh</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果文件不能被执行，可以先执行<code>chmod +x</code>命令，再运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test.sh</span><br><span class="line">$ sh test.sh</span><br></pre></td></tr></table></figure></p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>使用你最喜欢的文本编辑器打开shell脚本。</p><h3 id="第一行"><a href="#第一行" class="headerlink" title="第一行"></a>第一行</h3><p>第一行一般是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br></pre></td></tr></table></figure></p><p>#!后面的内容指定了使用<code>/bin/sh</code>来执行该脚本中的内容。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>shell脚本中使用#用来表示注释，所有以#开头的内容都不会被执行。</p><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p>shell脚本中比较常见的是<code>$</code>，用来表示对变量的引用。</p><h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><p>sh文件的开头第一行必须要类似于：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br></pre></td></tr></table></figure></p><p>实际的sh脚本中，第一行一般有如下两种：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br></pre></td></tr></table></figure></p><p>二者的区别不在本文的讨论之列，对于菜鸟级别的基础使用，两种都是可以的。</p><p><em>第一行其实有个名字，叫做：shebang，来源于 sharp(#) + bang(!)</em></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Hexo源文件放在GitHub上</title>
      <link href="/2016/12/13/Put-Hexo-on-GitHub/"/>
      <url>/2016/12/13/Put-Hexo-on-GitHub/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>因为工作的关系，公司对电脑的使用限制的比较严格，不可能在公司电脑上安装Hexo；同时，在公司的时候可能随时会冒出来一些想法或者看到一些资料，需要用Hexo写下来，这就让人比较蛋痛了。</p><a id="more"></a><p>好在自己有VPS，而且提供了基于网页的<code>Console</code>，可以在VPS上安装Hexo，远程操作。</p><p>但是新问题又来了：</p><ol><li>Hexo关于博客的设置，包括主题什么的都是存在本地的，如果我在VPS上更改了Hexo的设置或者主题，在家里电脑上再次<code>generate</code>的话就会把VPS上的设置覆盖掉。</li><li>VPS上基于网页的<code>Console</code>对中文十分不友好，无论是写中文内容还是操作和中文有关的设置，都会是一场悲剧。</li></ol><p>基于上面这些蛋疼（没事找抽）的需求，才有了这么一个疯狂的想法：把Hexo源文件放在GitHub上。</p><h2 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h2><p>把Hexo源文件放在GitHub上基本上能满足以下需求：</p><ol><li>VPS上的Hexo和家里电脑上的Hexo文件能始终保持同步，从而避免出现设置相互覆盖的问题。</li><li>如果是通过VPS建立的新文章，在执行完<code>hexo new</code>之后，可以<code>push</code>到GitHub上，从而实现在GitHub上编辑正文内容，避免了在网页版<code>Console</code>中编辑中文的尴尬。</li></ol><h2 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h2><h3 id="VPS端"><a href="#VPS端" class="headerlink" title="VPS端"></a>VPS端</h3><p>这里其实存在一个先后顺序，如果先配置VPS端的话，后续在个人电脑端配置的时候就需要用已经<code>push</code>到GitHub上的Hexo内容替换本地电脑上的Hexo内容，同理，如果是先配置个人电脑端的话，在VPS端就需要用已经<code>push</code>到GitHub上的Hexo内容替换VPS本地电脑上的Hexo内容。</p><h4 id="第一步：在VPS上安装Git"><a href="#第一步：在VPS上安装Git" class="headerlink" title="第一步：在VPS上安装Git"></a>第一步：在VPS上安装Git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core <span class="comment">#Ubuntu系统</span></span><br><span class="line">sudo dnf install git-core <span class="comment">#Fedora系统</span></span><br><span class="line">sudo yum install git-core <span class="comment">#Red Hat, CentOS系统</span></span><br></pre></td></tr></table></figure><h4 id="第二步：通过nvm安装Node-js"><a href="#第二步：通过nvm安装Node-js" class="headerlink" title="第二步：通过nvm安装Node.js"></a>第二步：通过nvm安装Node.js</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure><p>重启终端后执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install stable</span><br></pre></td></tr></table></figure></p><h4 id="第三步：安装Hexo，并且在-lt-hexo-files-gt-文件夹中初始化"><a href="#第三步：安装Hexo，并且在-lt-hexo-files-gt-文件夹中初始化" class="headerlink" title="第三步：安装Hexo，并且在&lt;hexo-files&gt;文件夹中初始化"></a>第三步：安装Hexo，并且在<code>&lt;hexo-files&gt;</code>文件夹中初始化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init /home/your user name/hexo-files</span><br><span class="line">$ <span class="built_in">cd</span> /home/your user name/hexo-files</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h4 id="第四步：根据自己的需求更改Hexo的设置"><a href="#第四步：根据自己的需求更改Hexo的设置" class="headerlink" title="第四步：根据自己的需求更改Hexo的设置"></a>第四步：根据自己的需求更改Hexo的设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git <span class="comment">#安装hexo-deployer-git</span></span><br></pre></td></tr></table></figure><p>设置站点名称等其他设置，这里请参考Hexo官方文档中关于<code>_config.yml</code>的部分。</p><p>设置主题的时候应当注意，很多Hexo主题都是托管在GitHub上的，在安装主题的时候大多会是通过<code>git clone</code>命令将主题文件克隆到Hexo的<code>themes</code>文件夹下。</p><p>如果是在本地管理Hexo，没有任何问题，但是对于我这个奇（变）葩（态）的需求来说，会产生严重问题：</p><p>我们需要将整个<code>&lt;hexo-files&gt;</code>目录下的所有文件和子目录作为一个<code>repo</code>放到GitHub上，而通过<code>git clone</code>命令会自动把所下载的主题作为一个<code>repo</code>放在<code>themes</code>文件夹下，这样就导致在我们自己的<code>repo</code>下有一个属于别人的子<code>repo</code>，当<code>push</code>到GitHub上以后，在GitHub上，子<code>repo</code>中的内容会显示为一个灰色的文件夹，其中的内容不可见。</p><p>为了避免这种情况，我们需要使用<code>wget</code>或者是<code>curl</code>命令，手动下载主题的<code>zip</code>或者<code>tar.gz</code>文件，然后手动解压到<code>&lt;hexo-files&gt;</code>中的<code>themes</code>文件夹下。</p><h4 id="第五步：设置Git所使用的用户名和邮箱："><a href="#第五步：设置Git所使用的用户名和邮箱：" class="headerlink" title="第五步：设置Git所使用的用户名和邮箱："></a>第五步：设置Git所使用的用户名和邮箱：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"you@example.com"</span></span><br><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br></pre></td></tr></table></figure><h4 id="第六步：在GitHub上创建新的的repository并且得到该repo的https地址"><a href="#第六步：在GitHub上创建新的的repository并且得到该repo的https地址" class="headerlink" title="第六步：在GitHub上创建新的的repository并且得到该repo的https地址"></a>第六步：在GitHub上创建新的的<code>repository</code>并且得到该<code>repo</code>的<code>https</code>地址</h4><h4 id="第七步：将-lt-hexo-files-gt-中的所有文件关联到GitHub"><a href="#第七步：将-lt-hexo-files-gt-中的所有文件关联到GitHub" class="headerlink" title="第七步：将&lt;hexo-files&gt;中的所有文件关联到GitHub"></a>第七步：将<code>&lt;hexo-files&gt;</code>中的所有文件关联到GitHub</h4><p>在<code>&lt;hexo-files&gt;</code>目录中执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git add *.*</span><br><span class="line">$ git commit -m <span class="string">"Create hexo files."</span></span><br><span class="line">$ git remote add origin <span class="string">"第六步得到的地址"</span></span><br><span class="line">$ git pull origin master</span><br><span class="line">$ git push -u origin master <span class="comment">#之后会提示输入GitHub的账号和密码</span></span><br></pre></td></tr></table></figure><h3 id="个人电脑端"><a href="#个人电脑端" class="headerlink" title="个人电脑端"></a>个人电脑端</h3><h4 id="第一步：重复上面前三步，安装好Git和Hexo，并且通过hexo-init初始化到文件夹-lt-hexo-files-gt-中。"><a href="#第一步：重复上面前三步，安装好Git和Hexo，并且通过hexo-init初始化到文件夹-lt-hexo-files-gt-中。" class="headerlink" title="第一步：重复上面前三步，安装好Git和Hexo，并且通过hexo init初始化到文件夹&lt;hexo-files&gt;中。"></a>第一步：重复上面前三步，安装好Git和Hexo，并且通过<code>hexo init</code>初始化到文件夹<code>&lt;hexo-files&gt;</code>中。</h4><h4 id="第二步：在-lt-hexo-files-gt-文件夹中初始化Git"><a href="#第二步：在-lt-hexo-files-gt-文件夹中初始化Git" class="headerlink" title="第二步：在&lt;hexo-files&gt;文件夹中初始化Git"></a>第二步：在<code>&lt;hexo-files&gt;</code>文件夹中初始化Git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git add .</span><br><span class="line">$ git remote add origin <span class="string">"GitHub远程仓库的地址，即是前面第六步得到的地址"</span></span><br></pre></td></tr></table></figure><h4 id="第三步：用GitHub上的内容替换掉本地内容"><a href="#第三步：用GitHub上的内容替换掉本地内容" class="headerlink" title="第三步：用GitHub上的内容替换掉本地内容"></a>第三步：用GitHub上的内容替换掉本地内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard origin/master</span><br><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="发文章"><a href="#发文章" class="headerlink" title="发文章"></a>发文章</h3><h4 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h4><p>正常来讲，通过Hexo发布一篇新文章需要通过<code>hexo new post post-title</code>命令，这条命令会自动在<code>&lt;hexo-files&gt;</code>下的<code>&lt;_source/_posts&gt;</code>目录下新建一个名为<code>post-title.md</code>的文件，这个文件内的MarkDown格式的内容就是文章的正文内容。</p><p>实际上，在这一步，Hexo除了帮我们创建一个文件以外，并没有做其它额外的操作，而且事实证明，在<code>&lt;_source/_posts&gt;</code>目录下，即便是自己手动创建的<code>.md</code>文件，也可以被<code>hexo generate</code>命令识别。</p><p>所以，我们可以直接在GitHub上，在<code>&lt;_source/_posts&gt;</code>目录下，手动建立一个<code>.md</code>文件，并且使用Markdown格式完成正文内容，然后再回到VPS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master <span class="comment">#把新建的Markdown文件拿到本地</span></span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>Hexo执行完<code>generate</code>和<code>deploy</code>命令之后，对<code>&lt;hexo-files&gt;</code>目录下的文件并不会有任何改动，这一点可以通过<code>git status</code>命令确认，所以也就不需要再执行<code>git push</code>。</p><h4 id="个人电脑"><a href="#个人电脑" class="headerlink" title="个人电脑"></a>个人电脑</h4><p>在个人电脑上，我们有自己喜欢的文本编辑器，并且也不存在中文支持问题，所以完全可以在本地编辑文章，只不过要记得编辑完之后要使用<code>push</code>命令，因为我们手动改变了<code>&lt;hexo-files&gt;</code>内的内容，要把更改同步到GitHub以使GitHub上内容始终是最新的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master <span class="comment">#更新本地文件确保和GitHub上保持同步</span></span><br><span class="line">$ hexo new post <span class="string">"My Post"</span> <span class="comment">#新建一篇博文</span></span><br><span class="line"><span class="comment">#使用自己喜欢的文本编辑器完成"My Post.md"</span></span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br><span class="line">$ git add . <span class="comment">#将新建立的文件纳入Git的监视</span></span><br><span class="line">$ git commit -m <span class="string">"Create My Post"</span> <span class="comment">#提交更改</span></span><br><span class="line">$ git push -u origin master <span class="comment">#之后会提示输入GitHub的账号和密码</span></span><br></pre></td></tr></table></figure><h3 id="发布新页面"><a href="#发布新页面" class="headerlink" title="发布新页面"></a>发布新页面</h3><p>与发文章类似，不同在于<code>hexo new page page_name</code>命令将在<code>&lt;source&gt;</code>目录下创建一个名为<code>&lt;page_name&gt;</code>的子目录，并在该子目录下建立一个名为<code>index.md</code>的文件，如果是在GitHub上手动创建的话，不要忘记将页面的名字作为子目录的名字，而页面的内容放在子目录下的<code>index.md</code>文件中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实Hexo本身已经是一个很优秀的博客程序，也足够方便，可是总会有一些像我这样的人会有一些奇（没）奇（事）怪（找）怪（抽）的需求，本着不折腾会死的精神，尝试了这么一套解决方法，现在用起来还算是比较顺手，只不过需要来回的敲那些命令，不过好在Linux上有个东西叫做shell脚本。</p><p>以后终于可以随时随地开开心心的Hexo了。</p>]]></content>
      
      
      <categories>
          
          <category> Accessories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
